local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Notification = require(game:GetService("ReplicatedStorage").Notification)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local SaveFileName = "FruitFinderLaDev.json"
local Settings = {}

local bv = Instance.new("BodyVelocity")
bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
bv.Velocity = Vector3.new()
bv.Name = "bV"

local bav = Instance.new("BodyAngularVelocity")
bav.AngularVelocity = Vector3.new()
bav.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
bav.Name = "bAV"

local function SaveSettings()
    HttpService:JSONEncode(Settings)
end

local function ReadSetting()
    local success, result = pcall(function()
        return HttpService:JSONDecode(readfile(SaveFileName))
    end)
    if success then 
        return result
    else
        SaveSettings()
        return ReadSetting()
    end
end
Settings = ReadSetting()

local function HopServer()
    local function Hop()
        for i=1,200 do
            local serverlist = ReplicatedStorage.__ServerBrowser:InvokeServer(i)
            for k,v in pairs(serverlist) do
                if k~=game.JobId and v.Count < 11 then
                    if not Settings[k] or tick() - Settings[k].Time > 60*60  then
                        Settings[k] = {
                            Time = tick()
                        }
                        SaveSettings()
                        ReplicatedStorage.__ServerBrowser:InvokeServer("teleport",k)
                        return true
                    elseif tick() - Settings[k].Time > 60*120 then
                        Settings[k] = nil
                    end
                end
            end
        end
        return false
    end
    if not getgenv().Loaded then
        local function child(childinstance)
            if childinstance.Name == "ErrorPrompt" then
                if childinstance.Visible then
                    if childinstance.TitleFrame.ErrorTitle.Text == "Teleport Failed" then
                        HopServer()
                    end
                end
                childinstance:GetPropertyChangedSignal("Visible"):Connect(function()
                    if childinstance.Visible then
                        if childinstance.TitleFrame.ErrorTitle.Text == "Teleport Failed" then
                            HopServer()
                        end
                    end
                end)
            end
        end
        for _, v in pairs(game.CoreGui.RobloxPromptGui.promptOverlay:GetChildren()) do
            child(v)
        end
        game.CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(child)
        getgenv().Loaded = true
    end
    while not Hop() do wait() end
    SaveSettings()
end

repeat
    task.wait()
until game:IsLoaded() and game.Players.LocalPlayer:FindFirstChild("PlayerGui") and game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main")

Notification.new("Check !!"):Display()
wait(0.5)
getgenv().Ran = true

if getgenv().Ran == true then
    for _, v in pairs(Workspace:GetDescendants()) do
        if v.ClassName == 'TouchTransmitter' and v.Parent.Name == 'Handle' then
            local BillboardGui = Instance.new('BillboardGui')
            local TextLabel = Instance.new('TextLabel')

            BillboardGui.AlwaysOnTop = true -- if its on top or not
            BillboardGui.Size = UDim2.new(0, 60, 0, 60) -- size of it
            BillboardGui.StudsOffset = Vector3.new(0,2,0)

            
            BillboardGui.Parent = v.Parent -- what the billboardgui goes into
            TextLabel.Parent = BillboardGui -- putting textlabel into billboardgui
            TextLabel.BackgroundColor3 = Color3.new(1,1,1) -- color
            TextLabel.BackgroundTransparency = 1 -- transparency
            TextLabel.Size = UDim2.new(1, 0, 1, 0) -- size
            TextLabel.Text = v.Parent.Parent.Name -- what the label says
            TextLabel.TextColor3 = Color3.new(1, 0, 0) -- color
            TextLabel.TextScaled = true -- if the text is scaled or not
        end
    end

    wait(0.5)

    if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main", 9e9):FindFirstChild("ChooseTeam") then
        for i,v in pairs({"MouseButton1Click", "MouseButton1Down", "Activated"}) do
            for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton[v])) do
                v.Function()
            end
        end

        wait(1)

        game.StarterGui:SetCore("SendNotification", {
            Title = "---[WELCOME FROM ùìõùìê ùììev YOUR FAVORITE SCRIPTER ü§ô--";
            Text = ""..game.Players.LocalPlayer.DisplayName.."";
            Duration = math.huge;
        })

        wait(0.5)

        game.StarterGui:SetCore("SendNotification", {
            Title = "---[CREATOR]---";
            Text = "Made By ùìõùìê ùììev#1222";
            Duration = math.huge;
        })

        wait(0.5)

        game.StarterGui:SetCore("SendNotification", {
            Title = "---[SOCIAL MEDIA]---";
            Text = "LA Hub Team Discord\nhttps://discord.gg/J6ukvmpv3p";
            Duration = math.huge;
        })

        wait(0.5)
    end
end

repeat task.wait(0.1) until game.Workspace.Characters:FindFirstChild(game.Players.LocalPlayer.Name)

while true do
local model = game.Workspace:FindFirstChild("Fruit")
if not model or not model:IsA("Model") then
require(game:GetService("ReplicatedStorage").Notification).new("Wait Hop Server!!"):Display()
HopServer()
else
local chr = game.Players.LocalPlayer.Character
local fruit = chr:FindFirstChildOfClass("Tool") and chr:FindFirstChildOfClass("Tool").Name:find("Fruit") and chr:FindFirstChildOfClass("Tool") or (function()
for _,fr in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
if fr.Name:find("Fruit") then
return fr
end
end
end)()

    if fruit then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", fruit:GetAttribute("OriginalName"), fruit)
        wait(0.5)
    end
    
    HopServer()
end
