-- Services
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Notification = require(ReplicatedStorage.Notification)

-- Settings
local SaveFileName = "FruitFinderLaDev.json"
local Settings = {}

-- BodyVelocity & BodyAngularVelocity templates
local bv = Instance.new("BodyVelocity")
bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
bv.Velocity = Vector3.new()
bv.Name = "bV"

local bav = Instance.new("BodyAngularVelocity")
bav.AngularVelocity = Vector3.new()
bav.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
bav.Name = "bAV"

-- Save settings to file
local function SaveSettings()
    writefile(SaveFileName, HttpService:JSONEncode(Settings))
end

-- Read settings from file
local function ReadSettings()
    if not pcall(function() readfile(SaveFileName) end) then
        SaveSettings()
    end

    local success, result = pcall(function()
        return HttpService:JSONDecode(readfile(SaveFileName))
    end)

    if success and type(result) == "table" then
        return result
    else
        SaveSettings()
        return {}
    end
end

Settings = ReadSettings()

-- Optimized Server Hopping
local function HopServer()
    local visitedServers = {} -- session cache

    local function Hop()
        local page = 1
        while true do
            local serverlist = ReplicatedStorage.__ServerBrowser:InvokeServer(page)
            if not serverlist or next(serverlist) == nil then
                break
            end

            for jobId, info in pairs(serverlist) do
                if jobId ~= game.JobId and info.Count < 11 then
                    local lastVisit = (Settings[jobId] and Settings[jobId].Time) or 0
                    if tick() - lastVisit > 60 * 60 and not visitedServers[jobId] then
                        visitedServers[jobId] = true
                        Settings[jobId] = {Time = tick()}
                        SaveSettings()
                        ReplicatedStorage.__ServerBrowser:InvokeServer("teleport", jobId)
                        return true
                    end
                end
            end

            page = page + 1
        end
        return false
    end

    -- Retry teleport on failure
    if not getgenv().Loaded then
        local function onChildAdded(childInstance)
            if childInstance.Name == "ErrorPrompt" then
                local function checkFail()
                    if childInstance.Visible and childInstance.TitleFrame.ErrorTitle.Text == "Teleport Failed" then
                        HopServer()
                    end
                end
                checkFail()
                childInstance:GetPropertyChangedSignal("Visible"):Connect(checkFail)
            end
        end

        for _, v in pairs(game.CoreGui.RobloxPromptGui.promptOverlay:GetChildren()) do
            onChildAdded(v)
        end
        game.CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(onChildAdded)
        getgenv().Loaded = true
    end

    while not Hop() do
        task.wait(1)
    end
    SaveSettings()
end

-- Wait for game to fully load
repeat task.wait() until game:IsLoaded() and Players.LocalPlayer:FindFirstChild("PlayerGui") and Players.LocalPlayer.PlayerGui:FindFirstChild("Main")

Notification.new("Check !!"):Display()
task.wait(0.5)
getgenv().Ran = true

-- Display fruit names above them
if getgenv().Ran then
    for _, v in pairs(Workspace:GetDescendants()) do
        if v:IsA("TouchTransmitter") and v.Parent.Name == "Handle" then
            local BillboardGui = Instance.new("BillboardGui")
            local TextLabel = Instance.new("TextLabel")

            BillboardGui.AlwaysOnTop = true
            BillboardGui.Size = UDim2.new(0, 60, 0, 60)
            BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
            BillboardGui.Parent = v.Parent

            TextLabel.Parent = BillboardGui
            TextLabel.BackgroundTransparency = 1
            TextLabel.Size = UDim2.new(1, 0, 1, 0)
            TextLabel.Text = v.Parent.Parent.Name
            TextLabel.TextColor3 = Color3.new(1, 0, 0)
            TextLabel.TextScaled = true
        end
    end

    task.wait(0.5)

    local mainGui = Players.LocalPlayer.PlayerGui.Main
    if mainGui:FindFirstChild("ChooseTeam") then
        local buttons = mainGui.ChooseTeam.Container.Pirates.Frame.ViewportFrame:GetChildren()
        for _, btn in pairs(buttons) do
            if btn:IsA("TextButton") then
                for _, event in pairs(getconnections(btn.Activated)) do
                    event.Function()
                end
            end
        end

        local function notify(title, text)
            game.StarterGui:SetCore("SendNotification", {
                Title = title;
                Text = text;
                Duration = 5;
            })
        end

        notify("---[WELCOME FROM YOUNG YOUR FAVORITE SCRIPTER ðŸ¤™---", Players.LocalPlayer.DisplayName)
        task.wait(0.5)
        notify("---[CREATOR]---", "Made By young")
        task.wait(0.5)
        notify("---[SOCIAL MEDIA]---", "LA Hub Team Discord\nhttps://discord.gg/J6ukvmpv3p")
    end
end

repeat task.wait(0.1) until Workspace.Characters:FindFirstChild(Players.LocalPlayer.Name)

-- Main loop
while true do
    local model = Workspace:FindFirstChild("Fruit")
    if not model or not model:IsA("Model") then
        Notification.new("Wait Hop Server!!"):Display()
        HopServer()
    else
        local chr = Players.LocalPlayer.Character
        local fruit = chr:FindFirstChildOfClass("Tool")
        if not fruit or not fruit.Name:find("Fruit") then
            for _, fr in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
                if fr.Name:find("Fruit") then
                    fruit = fr
                    break
                end
            end
        end

        if fruit then
            ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit", fruit:GetAttribute("OriginalName"), fruit)
            task.wait(0.5)
        end

        HopServer()
    end
end
