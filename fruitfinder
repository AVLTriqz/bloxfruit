-- niggers
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Lighting = game:GetService("Lighting")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Add blur effect for UI depth
local blur = Instance.new("BlurEffect", Lighting)
blur.Size = 8

-- Utility: wait for deep child safely
local function SafeWaitFor(root, ...)
    local current = root
    for i = 1, select("#", ...) do
        current = current:WaitForChild(select(i, ...))
    end
    return current
end

-- Initialize critical components with error handling
local function InitComponents()
    local controllers = SafeWaitFor(ReplicatedStorage, "Controllers")
    local mapServices = controllers:WaitForChild("MapServices")
    local arenaComponentClient = mapServices:WaitForChild("ArenaComponentClient")
    local arenaFishComponent = arenaComponentClient:WaitForChild("ArenaFishComponent")
    return controllers, mapServices, arenaComponentClient, arenaFishComponent
end

local Controllers, MapServices, ArenaComponentClient, ArenaFishComponent

local success, err = pcall(function()
    Controllers, MapServices, ArenaComponentClient, ArenaFishComponent = InitComponents()
end)

if not success then
    warn("Failed to initialize components: ", err)
    -- Depending on needs, could retry or continue with warnings
end

-- Utility: fancy GUI frame creator for polished look
local function CreateFrame(parent, size, pos, color, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Parent = parent
    frame.Size = size
    frame.Position = pos
    frame.BackgroundColor3 = color
    frame.BackgroundTransparency = 0.16
    frame.ZIndex = 10
    local corner = Instance.new("UICorner")
    corner.CornerRadius = cornerRadius or UDim.new(0, 20)
    corner.Parent = frame
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(128,0,255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(32,32,50))})
    gradient.Rotation = 40
    gradient.Parent = frame
    local shadow = Instance.new("ImageLabel")
    shadow.Parent = frame
    shadow.AnchorPoint = Vector2.new(0.5,0.5)
    shadow.Position = UDim2.new(0.5,0,0.5,7)
    shadow.Size = UDim2.new(1.13,0,1.14,5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://6015897843"
    shadow.ImageTransparency = 0.72
    shadow.ZIndex = 0
    return frame
end

-- Create main UI
local ScreenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.IgnoreGuiInset = true

local MainFrame = CreateFrame(ScreenGui, UDim2.new(0, 350, 0, 190), UDim2.new(0.85, -175, 0.86, 0), Color3.fromRGB(30,20,40), UDim.new(0,22))
MainFrame.Active = true
MainFrame.Draggable = true

-- Header: animated rainbow "Fruit Finder"
local Header = CreateFrame(MainFrame, UDim2.new(1,0,0,38), UDim2.new(0,0,0,0), Color3.fromRGB(102,0,204), UDim.new(0,22))
Header.BackgroundTransparency = 0.2

local HeaderLabel = Instance.new("TextLabel")
HeaderLabel.Parent = Header
HeaderLabel.Size = UDim2.new(1,0,1,0)
HeaderLabel.BackgroundTransparency = 1
HeaderLabel.Font = Enum.Font.GothamBlack
HeaderLabel.TextScaled = true
HeaderLabel.TextStrokeTransparency = 0.74
HeaderLabel.Text = ""
HeaderLabel.ZIndex = 15

local bannerText = "üçâ Fruit Finder: Ultimate Edition üçâ"

spawn(function()
    while true do
        for i = 1, #bannerText do
            HeaderLabel.Text = string.sub(bannerText,1,i)
            local t = math.abs(math.sin(tick()*2 + i*0.09))
            HeaderLabel.TextColor3 = Color3.fromHSV(t,0.82,1)
            HeaderLabel.TextStrokeTransparency = 0.77 - 0.11*t
            RunService.RenderStepped:Wait()
        end
        wait(0.7)
        for i = #bannerText, 1, -3 do
            HeaderLabel.Text = string.sub(bannerText,1,i)
            RunService.RenderStepped:Wait()
        end
        HeaderLabel.Text = ""
        wait(0.3)
    end
end)

local Ribbon = Instance.new("Frame", Header)
Ribbon.Size = UDim2.new(1,0,0,6)
Ribbon.Position = UDim2.new(0,0,1,-4)
Ribbon.BackgroundColor3 = Color3.fromRGB(255,255,160)
Ribbon.BackgroundTransparency = 0.5
local ribbonCorner = Instance.new("UICorner", Ribbon)
ribbonCorner.CornerRadius = UDim.new(0,3)

spawn(function()
    while true do
        local s = 0.57 + math.sin(tick()*4)*0.07
        Ribbon.Size = UDim2.new(s,0,0,6)
        Ribbon.BackgroundTransparency = 0.45 + math.abs(math.cos(tick()*12))*0.14
        RunService.RenderStepped:Wait()
    end
end)

-- Status label
local StatusFrame = CreateFrame(MainFrame, UDim2.new(0.93,0,0.34,0), UDim2.new(0.035,0,0.235,0), Color3.fromRGB(45,35,70), UDim.new(0,14))
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Parent = StatusFrame
StatusLabel.Size = UDim2.new(1,0,1,0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Font = Enum.Font.GothamBlack
StatusLabel.TextScaled = true
StatusLabel.TextStrokeTransparency = 0.7
StatusLabel.TextStrokeColor3 = Color3.fromRGB(128,192,190)
StatusLabel.TextColor3 = Color3.fromRGB(220,255,210)
StatusLabel.Text = "Status: Searching..."

-- Fruit count label
local FruitFrame = CreateFrame(MainFrame, UDim2.new(0.93,0,0.19,0), UDim2.new(0.035,0,0.63,0), Color3.fromRGB(60,30,80), UDim.new(0,14))
local FruitCountLabel = Instance.new("TextLabel")
FruitCountLabel.Parent = FruitFrame
FruitCountLabel.Size = UDim2.new(1,0,1,0)
FruitCountLabel.BackgroundTransparency = 1
FruitCountLabel.Font = Enum.Font.GothamBold
FruitCountLabel.TextColor3 = Color3.fromRGB(0,255,140)
FruitCountLabel.TextStrokeTransparency = 0.45
FruitCountLabel.TextScaled = true
FruitCountLabel.Text = "Fruits Collected: 0"

spawn(function()
    while true do
        local p = 0.62 + math.abs(math.sin(tick()*3))*0.18
        FruitFrame.BackgroundTransparency = 0.10 + 0.08*p
        FruitCountLabel.TextColor3 = Color3.fromHSV(0.34 + math.sin(tick())*0.13, 0.9, 1)
        RunService.RenderStepped:Wait()
    end
end)

-- Notification system
local function Notify(title, text, duration)
    duration = duration or 4
    local notif = CreateFrame(ScreenGui, UDim2.new(0,256,0,43), UDim2.new(0.86,-120,0.07,-3), Color3.fromRGB(30,30,45), UDim.new(0,13))
    notif.AnchorPoint = Vector2.new(0.5,0)
    notif.ZIndex = 35

    local titleLabel = Instance.new("TextLabel", notif)
    titleLabel.Size = UDim2.new(1,0,0.5,0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBlack
    titleLabel.TextColor3 = Color3.fromRGB(255,235,80)
    titleLabel.TextStrokeTransparency = 0.7
    titleLabel.Text = title
    titleLabel.TextScaled = true

    local textLabel = Instance.new("TextLabel", notif)
    textLabel.Size = UDim2.new(1,0,0.5,0)
    textLabel.Position = UDim2.new(0,0,0.5,0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextColor3 = Color3.fromRGB(250,255,255)
    textLabel.TextStrokeTransparency = 0.75
    textLabel.Text = text
    textLabel.TextScaled = true

    local edge = Instance.new("UIStroke", notif)
    edge.Thickness = 1.75
    edge.Color = Color3.fromRGB(128,196,180)
    edge.Transparency = 0.33

    spawn(function()
        local tweenIn = TweenService:Create(notif, TweenInfo.new(0.24, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.86, -120, 0.09, 0)})
        tweenIn:Play()
        tweenIn.Completed:Wait()
        wait(duration)
        local tweenOut = TweenService:Create(notif, TweenInfo.new(0.23, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(0.86, -120, 0.09, -80)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        notif:Destroy()
    end)
end

-- Fruit ESP with pulsing rainbow color
local function AddESP(fruit)
    if not fruit or not fruit.PrimaryPart then return end
    local bgui = Instance.new("BillboardGui", fruit)
    bgui.AlwaysOnTop = true
    bgui.Size = UDim2.new(0,84,0,28)
    bgui.StudsOffset = Vector3.new(0,3,0)
    local label = Instance.new("TextLabel", bgui)
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.Text = "üçí " .. fruit.Name .. " üçí"
    label.Font = Enum.Font.GothamBlack
    label.TextColor3 = Color3.fromHSV(math.random(),0.94,1)
    label.TextStrokeTransparency = 0.45
    label.TextStrokeColor3 = Color3.fromRGB(255,0,128)
    label.TextScaled = true

    spawn(function()
        while fruit and fruit.Parent and fruit.PrimaryPart do
            local t = tick()
            label.TextColor3 = Color3.fromHSV(math.abs(math.sin(t*3.5)), 0.96, 1)
            label.TextStrokeTransparency = 0.37 + 0.21*math.sin(t*2.1)
            label.Position = UDim2.new(0,0,0.04 + 0.03*math.cos(t*1.1), 0)
            label.TextSize = 14 + 4*math.abs(math.sin(t*2.2))
            RunService.RenderStepped:Wait()
        end
        bgui:Destroy()
    end)
end

-- Server list fetching
local function ListServers(cursor)
    local url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=50"
    if cursor then url = url .. "&cursor=" .. cursor end
    local response = game:HttpGet(url)
    return HttpService:JSONDecode(response)
end

-- Emergency hop fallback
local function EmergencyHop()
    Notify("Emergency", "You have used Emergency Server Hop. Please wait while we hop servers. Sorry for the inconvenience.", 5)
    wait(3)
    local success, err = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)
    if not success then warn("Emergency hop failed:", err) end
end

-- Server hop function
local function HopServer()
    for i = 5, 1, -1 do
        StatusLabel.Text = ("Status: Server hop in %ds..."):format(i)
        wait(1)
    end
    Notify("Fruit Finder", "Server hopping now!", 3)
    local cursor, targetServer = nil, nil
    repeat
        local serversData = ListServers(cursor)
        cursor = serversData.nextPageCursor
        for _, srv in pairs(serversData.data) do
            if srv.playing < srv.maxPlayers and srv.id ~= game.JobId then
                targetServer = srv
                break
            end
        end
    until targetServer or not cursor
    if targetServer then
        local ok, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer.id, LocalPlayer)
        end)
        if not ok then
            warn("Teleport failed:", err)
            EmergencyHop()
        end
    else
        EmergencyHop()
    end
end

-- Max fruits to hold
local MAX_FRUITS = 2
local collectedFruits = 0

-- Add Emergency Server Hop Button
local emergencyButton = Instance.new("TextButton", MainFrame)
emergencyButton.Size = UDim2.new(0,140,0,32)
emergencyButton.Position = UDim2.new(0.5,-70,0.9,-10)
emergencyButton.BackgroundColor3 = Color3.fromRGB(180,30,50)
emergencyButton.BackgroundTransparency = 0.15
emergencyButton.Font = Enum.Font.GothamBold
emergencyButton.TextColor3 = Color3.fromRGB(255,220,220)
emergencyButton.TextScaled = true
emergencyButton.Text = "Emergency Server Hop"
local buttonCorner = Instance.new("UICorner", emergencyButton)
buttonCorner.CornerRadius = UDim.new(0,12)

emergencyButton.MouseButton1Click:Connect(function()
    Notify("Warning", "You have used Emergency Server Hop. Please wait while we hop servers. Sorry for the inconvenience.", 5)
    wait(1)
    EmergencyHop()
end)

-- Startup warning label above emergency button
local warningLabel = Instance.new("TextLabel", MainFrame)
warningLabel.Size = UDim2.new(0,280,0,40)
warningLabel.Position = UDim2.new(0.5,-140,0.82,-50)
warningLabel.BackgroundTransparency = 0.7
warningLabel.BackgroundColor3 = Color3.fromRGB(100,25,25)
warningLabel.TextColor3 = Color3.fromRGB(255,180,180)
warningLabel.Font = Enum.Font.GothamBold
warningLabel.TextScaled = true
warningLabel.TextWrapped = true
warningLabel.Text = "‚ö†Ô∏è WARNING: 'Emergency Server Hop' button is only for use if the script breaks. Sorry for the inconvenience."
local warningCorner = Instance.new("UICorner", warningLabel)
warningCorner.CornerRadius = UDim.new(0,12)

spawn(function()
    wait(8)
    for i = 1, 20 do
        warningLabel.TextTransparency = i * 0.05
        warningLabel.BackgroundTransparency = 0.7 + (i * 0.03)
        wait(0.1)
    end
    warningLabel:Destroy()
end)

-- Main loop
while true do
    local fruits = {}
    for _, model in pairs(Workspace:GetDescendants()) do
        if model:IsA("Model") and model.Name:find("Fruit") then
            table.insert(fruits, model)
            AddESP(model)
        end
    end

    if #fruits == 0 then
        StatusLabel.Text = "Status: No fruits found, hopping server..."
        HopServer()
    elseif collectedFruits >= MAX_FRUITS then
        StatusLabel.Text = "Status: Storage full, hopping server..."
        HopServer()
    else
        for _, fruit in pairs(fruits) do
            if fruit.PrimaryPart then
                StatusLabel.Text = "Status: Moving to fruit..."
                local tween = TweenService:Create(HumanoidRootPart, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(fruit.PrimaryPart.Position + Vector3.new(0,3,0))})
                tween:Play()
                tween.Completed:Wait()

                local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool") or LocalPlayer.Backpack:FindFirstChildOfClass("Tool")
                if tool and tool.Name:find("Fruit") then
                    local success, err = pcall(function()
                        ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit", tool:GetAttribute("OriginalName"), tool)
                    end)
                    if success then
                        collectedFruits = collectedFruits + 1
                        FruitCountLabel.Text = "Fruits Collected: " .. collectedFruits
                        Notify("Fruit Finder", "Fruit collected!", 3)
                        if collectedFruits >= MAX_FRUITS then
                            StatusLabel.Text = "Status: Storage full, preparing to hop..."
                            HopServer()
                            break
                        end
                    else
                        warn("Failed to store fruit:", err)
                        HopServer()
                        break
                    end
                end
            end
        end
    end

    wait(0.8)
end
